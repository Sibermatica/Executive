package com.microsoft.windows.system.forms;

import org.sibermatica.lang.Eventualizable;

import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

import java.awt.*;

import java.util.logging.Level;

/**
 * <h1>Forms</h1>
 * The class {@code Forms} is a implementation of the C# class {@code System.Windows.Forms} that it used to create form application with Visual C++ Redistributable
 *
 * <a href="mailtocirodeveloper@sibermatica.org">Ciro Alejo Diaz</a>
 * @since 1.0
 * @see javax.swing
 * @version 1.0.1
 */

public class Forms extends JFrame
        implements Drawable, Eventualizable {

    /**
     * If set to true, the class {@code Forms} will log all events generated by the class
     */
    private final boolean LOG_EVENTS = true;

    /**
     * Indicates which level of logging to use.
     */
    private Level LOG_LEVEL = Level.INFO;

    /**
     * X coordinate of the form
     */
    private int x;

    /**
     * Y coordinate of the form
     */
    private int y;

    /**
     * Size of the form
     */
    private Dimension size;

    /**
     * Default form size
     * @see java.awt.Dimension
     */
    public static final Dimension DEFAULT_SIZE = new Dimension(500, 500);

    /**
     * Create a new instance of {@code Forms} class and initializes all properties
     * associated
     *
     * @since 1.0
     * @see javax.swing.JFrame#JFrame()
     */
    public Forms() {
        initComponents();
    }

    public final void initComponents() {

        /* Set the default look and feel of Microsoft Windows */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }

        /* Define basic properties */
        getContentPane().setLayout(null); // To avoid layout issues
        setSize(DEFAULT_SIZE); // Resize the form
        setLocationRelativeTo(null); // Make the form centered and independent
        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE); // Do not finish the application when the window is closed

        show(); // Finally, show the form
    }

    /**
     * Set the x position of the form
     * @see java.awt.Point
     */
    @Override
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Set the y position of the form
     *
     * @param y the y position of the form
     * @see java.awt.Point
     */
    @Override
    public void setY(int y) {
        this.y = y;
    }

    /**
     * @return true if the form is visible, false otherwise
     */
    @Override
    public boolean isVisible() {
        return this.isShowing();
    }

    /**
     * @return integer X position of the form
     */
    @Override
    public int getX() {
        return x;
    }

    /**
     * @return integer Y position of the form
     */
    @Override
    public int getY() {
        return y;
    }

    /**
     * @return size of the form
     *
     * @see java.awt.Dimension
     */
    @Override
    public Dimension getSize() {
        return size;
    }

    /**
     * Set the size of the form
     *
     * @param size the size of the form
     * @see java.awt.Dimension
     */
    @Override
    public void setSize(Dimension size) {
        this.size = size;
    }

    /**
     * Set the size of the form
     *
     * @param width size of the form
     * @param height size of the form
     * @see java.awt.Dimension
     */
    @Override
    public void setSize(int width, int height) {
        setSize(new Dimension(width, height));
    }

    /**
     * @return The height of the form in integer
     */
    @Override
    public int getHeight() {
        return size.height;
    }

    /**
     * @return The width of the form in integer
     */
    @Override
    public int getWidth() {
        return size.width;
    }
}
